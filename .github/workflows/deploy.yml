name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  # pull_request:
  #   types:
  #     - closed  # Trigger when a pull request is closed
  #   branches:
  #     - development

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.event.repository.name | toLower }}
  OWNER: ${{ github.repository_owner | toLower }}

jobs:
  build-and-push-image:
    # if: github.event.pull_request.merged == true  # Ensure the action only runs for merged PRs
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Build Docker Image Locally for Validation
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }} .

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value={{env.IMAGE_NAME}}-{{branch}}-{{sha}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Clean up older Docker images
        run: |
          # Get a list of existing tags sorted by creation date in descending order
          IMAGE_TAGS=$(ghcr list-tags ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }} --format "{{ .Tag }}" --filter "branch={{ github.ref_name }}" --sort created_at:desc)
          
          # Count the number of tags
          TAG_COUNT=$(echo "$IMAGE_TAGS" | wc -l)
          
          # Set the maximum allowed number of images
          MAX_IMAGES=5
          
          if [ "$TAG_COUNT" -gt "$MAX_IMAGES" ]; then
            # Get the tags to delete (all but the most recent 3 tags)
            TAGS_TO_DELETE=$(echo "$IMAGE_TAGS" | tail -n +4)
            
            # Loop through the tags and delete them
            for TAG in $TAGS_TO_DELETE; do
              docker rmi ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:$TAG
            done
          fi

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push-image

  #   strategy:
  #     matrix:
  #       environment: [development, qa, staging, production]

  #   steps:
  #   - name: Deploy to AWS ECS
  #     if: github.ref == 'refs/heads/' + matrix.environment
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets['AWS_ACCESS_KEY_ID_' + matrix.environment | upper] }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets['AWS_SECRET_ACCESS_KEY_' + matrix.environment | upper] }}
  #       AWS_REGION: ${{ secrets['AWS_REGION_' + matrix.environment | upper] }}
  #       ECS_CLUSTER: ${{ secrets['ECS_CLUSTER_' + matrix.environment | upper] }}
  #       ECS_SERVICE: ${{ secrets['ECS_SERVICE_' + matrix.environment | upper] }}
  #     run: |
  #       aws ecs update-service \
  #         --cluster $ECS_CLUSTER \
  #         --service $ECS_SERVICE \
  #         --force-new-deployment
