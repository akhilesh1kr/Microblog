name: CI/CD Pipeline staging4

on:
  push:
    branches:
      - master
      - development
      - staging

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push-image:
    # if: github.event.pull_request.merged == true  # Ensure the action only runs for merged PRs
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "IMAGE_NAME=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "OWNER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(echo '${{ github.ref_name }}' | tr '[:upper:]' '[:lower:]' | sed 's|refs/heads/||')" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Build Docker Image Locally for Validation
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }} .

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=${{ env.BRANCH_NAME }}-
            type=raw,value=${{env.IMAGE_NAME}}-${{ env.BRANCH_NAME }}-{{sha}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Clean up older Docker images
        run: |
          # Log in to the GitHub CLI using GITHUB_TOKEN
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      
          # List image versions and filter by branch name using GitHub CLI
          echo "Fetching image versions..."
          # API_RESPONSE=$(gh api -H "Accept: application/vnd.github.v3+json" \
          #   "/orgs/${{ env.OWNER }}/packages/container/${{ env.IMAGE_NAME }}/versions" --paginate)
          API_RESPONSE=$(gh api -H "Accept: application/vnd.github.v3+json" \
            "/user/packages/container/${{ env.IMAGE_NAME }}/versions" --paginate)
            
          echo "Raw API response: $API_RESPONSE"
          
          IMAGE_VERSIONS=$(echo "$API_RESPONSE" | jq -r '.[] | select(.metadata.container.tags[] | startswith("${{ env.BRANCH_NAME }}")) | .id')
      
          # Count the number of versions
          TAG_COUNT=$(echo "$IMAGE_VERSIONS" | wc -l)
          
          # Set the maximum allowed number of images
          MAX_IMAGES=3
      
          echo "IMAGE_VERSIONS: $IMAGE_VERSIONS"
          echo "TAG_COUNT: $TAG_COUNT"
          echo "Attempting to delete old tags..."
          
          if [ "$TAG_COUNT" -gt "$MAX_IMAGES" ]; then
            # Get the image IDs to delete (all but the most recent 3)
            VERSIONS_TO_DELETE=$(echo "$IMAGE_VERSIONS" | tail -n +4)
      
            echo "VERSIONS_TO_DELETE: $VERSIONS_TO_DELETE"
            
            # Loop through the IDs and delete them using GitHub CLI
            for VERSION_ID in $VERSIONS_TO_DELETE; do
              echo "Deleting version ID: $VERSION_ID"
              # gh api -X DELETE "/orgs/${{ env.OWNER }}/packages/container/${{ env.IMAGE_NAME }}/versions/$VERSION_ID"
              gh api -X DELETE "/user/packages/container/${{ env.IMAGE_NAME }}/versions/$VERSION_ID"
            done
          fi



      # - name: Delete Old Docker Images
      #   uses: actions/delete-package-versions@v4
      #   with:
      #     owner: ${{ env.OWNER }}
      #     package-name: ${{ env.IMAGE_NAME }}
      #     package-type: "container"
      #     min-versions-to-keep: 3  # Number of versions to keep
      #     ignore-versions: "^(?!.*${{ env.BRANCH_NAME }}).+$"      # Versions to ignore, use regex pattern if needed
      #     token: ${{ secrets.GITHUB_TOKEN }}

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push-image

  #   strategy:
  #     matrix:
  #       environment: [development, qa, staging, production]

  #   steps:
  #   - name: Deploy to AWS ECS
  #     if: github.ref == 'refs/heads/' + matrix.environment
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets['AWS_ACCESS_KEY_ID_' + matrix.environment | upper] }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets['AWS_SECRET_ACCESS_KEY_' + matrix.environment | upper] }}
  #       AWS_REGION: ${{ secrets['AWS_REGION_' + matrix.environment | upper] }}
  #       ECS_CLUSTER: ${{ secrets['ECS_CLUSTER_' + matrix.environment | upper] }}
  #       ECS_SERVICE: ${{ secrets['ECS_SERVICE_' + matrix.environment | upper] }}
  
  #     run: |
  #       aws ecs update-service \
  #         --cluster $ECS_CLUSTER \
  #         --service $ECS_SERVICE \
  #         --force-new-deployment
