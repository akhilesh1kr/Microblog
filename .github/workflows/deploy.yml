name: CI/CD Pipeline

on:
  push:
    branches:
      - master

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push-image:
    # if: github.event.pull_request.merged == true  # Ensure the action only runs for merged PRs
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "IMAGE_NAME=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "OWNER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(echo '${{ github.ref_name }}' | tr '[:upper:]' '[:lower:]' | sed 's|refs/heads/||')" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Build Docker Image Locally for Validation
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }} .

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=${{ env.BRANCH_NAME }}-
            type=raw,value=${{env.IMAGE_NAME}}-${{ env.BRANCH_NAME }}-{{sha}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Delete Old Docker Images
        uses: actions/delete-package-versions@v4
        with:
          owner: ${{ env.OWNER }}
          package-name: ${{ env.IMAGE_NAME }}
          package-type: "container"
          min-versions-to-keep: 3  # Number of versions to keep
          ignore-versions: ""      # Versions to ignore, use regex pattern if needed
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          DELETE_TAGS_REGEX: "^${{ env.BRANCH_NAME }}-"  # Regex to filter tags by branch name

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push-image

  #   strategy:
  #     matrix:
  #       environment: [development, qa, staging, production]

  #   steps:
  #   - name: Deploy to AWS ECS
  #     if: github.ref == 'refs/heads/' + matrix.environment
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets['AWS_ACCESS_KEY_ID_' + matrix.environment | upper] }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets['AWS_SECRET_ACCESS_KEY_' + matrix.environment | upper] }}
  #       AWS_REGION: ${{ secrets['AWS_REGION_' + matrix.environment | upper] }}
  #       ECS_CLUSTER: ${{ secrets['ECS_CLUSTER_' + matrix.environment | upper] }}
  #       ECS_SERVICE: ${{ secrets['ECS_SERVICE_' + matrix.environment | upper] }}
  
  #     run: |
  #       aws ecs update-service \
  #         --cluster $ECS_CLUSTER \
  #         --service $ECS_SERVICE \
  #         --force-new-deployment
